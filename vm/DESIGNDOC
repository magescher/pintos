       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mitch Hinrichs <mitch.hinrichs@utexas.edu>
Abigail Johnson <abigailjohnson@utexas.edu>
Anthony Weems <amlweems@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef enum spage_type {
  FILE,
  SWAP
} spage_type_t;

typedef struct spage {
  void *uaddr;                 /* User address ptr. */
  spage_type_t type;           /* Type of page: either file (lazy load / mmap) or swap. */
  bool loaded;                 /* Allows for lazy loading. */
  bool writable;               /* Is page writable. */

  struct file *file_ptr;       /* File ptr for file on disk, only valid if type == MMAP. */
  off_t file_off;              /* Offset into the file. */
  size_t file_read_bytes;      /* Bytes to be read. */
  size_t file_zero_bytes;      /* Bytes to be zero'd. */

  size_t swap_off;             /* Offset into the swap table. */
  bool swap_write;             /* Does the swap slot have write permission. */

  struct hash_elem hash_elem;  /* Used for managing the hash table. */
} spage_t;

Stores supplemental page table entries.

typedef struct frame {
  void *upage;
  void *kpage;
  struct thread *thread;
  struct list_elem list_elem;
} frame_t;


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Frame table is a simple list. We search through entry at a time until we find a frame with a matching kernel or user address (depending what we're looking for).

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We store the thread for a particular frame and check the user page directory.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We lock all appropriate frame table accesses.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Lists provide easy insert and we do not need to search for frames very much. The sup. page table is a hash map because we want to perform lookups often.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct spage {
  void *uaddr;                 /* User address ptr. */
  spage_type_t type;           /* Type of page: either file (lazy load / mmap) or swap. */
  bool loaded;                 /* Allows for lazy loading. */
  bool writable;               /* Is page writable. */

  struct file *file_ptr;       /* File ptr for file on disk, only valid if type == MMAP. */
  off_t file_off;              /* Offset into the file. */
  size_t file_read_bytes;      /* Bytes to be read. */
  size_t file_zero_bytes;      /* Bytes to be zero'd. */

  size_t swap_off;             /* Offset into the swap table. */
  bool swap_write;             /* Does the swap slot have write permission. */

  struct hash_elem hash_elem;  /* Used for managing the hash table. */
} spage_t;

Swap info is stored in sup. table.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We use the clock alg. for determining the page to evict. We sweep pages for frames without access bit, setting access bit to zero as we go. Second sweep, we will have selected a page.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We remove the page from the frame table and update the process' sup. page table.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

If it was within the accepted range of stack accesses, we determine it to be a stack fault. This range is 32 bytes.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We always lock accesses to data structures, but are sure to never call locking code from a function that locks.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Again, these functions are locked, but only lock once at entrance to prevent race conditions.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

File system operations are all locked with a global lock. Frame operations are the same.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We simply page fault from the system call and bring the page in to memory in the page fault handler.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We are somewhere in the middle. Each component has a lock, which allows granularity, without the stress of complexity.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct spage {
  void *uaddr;                 /* User address ptr. */
  spage_type_t type;           /* Type of page: either file (lazy load / mmap) or swap. */
  bool loaded;                 /* Allows for lazy loading. */
  bool writable;               /* Is page writable. */

  struct file *file_ptr;       /* File ptr for file on disk, only valid if type == MMAP. */
  off_t file_off;              /* Offset into the file. */
  size_t file_read_bytes;      /* Bytes to be read. */
  size_t file_zero_bytes;      /* Bytes to be zero'd. */

  size_t swap_off;             /* Offset into the swap table. */
  bool swap_write;             /* Does the swap slot have write permission. */

  struct hash_elem hash_elem;  /* Used for managing the hash table. */
} spage_t;

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
    struct thread *parent;              /* Parent thread. */
    struct file *file;                  /* File ptr to executable. */
    struct hash fds;                    /* File descriptor table. */
    struct semaphore run_sema;          /* Thread is running. */
    struct semaphore exit_sema;         /* Thread is allowed to exit. */
    int rc;                             /* Return code. */

    struct hash spage_table;            /* Supplemental page table. */
    struct lock lock_pd;                /* Page directory lock. */
    struct hash map_table;
    size_t map_allocator;

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

We treat mmap'd files similar to other sup. table entries. We also store the mapping id in a mapping table inside the thread struct.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We just check all pages of the file to see if there is an existing mapping or pagedir entry. This section was quite easy to implement as the Stanford docs are very detailed for each failure case.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We choose to share some structures, but opted to treat them separately as they were implemented at different times.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?